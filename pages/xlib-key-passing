There is a problem with doing key combos with Xlib, and that is, how do can you
dynamically decide to not handle a key combo?  Generally if you're writing a
window manager or keygrabber or whatever, you read a config file and grab some
known key combinations, and it's that simple.  But what if your key combo
handling "rules" aren't quite so static?  What if you want to match against some
sort of logic that can't be predetermined at the time of your <code>XGrabKey</code>
calls?

Well the answer is pretty simple, but seemed elusive for quite a while.
Basically, to swallow a keycombo, you use <code>XAllowEvents</code> with
<code>ReplayKeyboard</code> on both the <code>KeyPress</code> <strong>and</strong> <code>KeyRelease</code>
events that match your keybinding.  To pass a keycombo on to the client
windows, you use <code>XAllowEvents</code> with <code>AsyncKeyboard</code> <strong>and</strong> do an
<code>XFlush</code>.  If you don't do an <code>XFlush</code>, then quickly repeated keycombos
(like when you're holding the keys down and they auto-repeat) will get "lost."

Example:

<pre>
/* Written by Nick Welch <mack@incise.org>, 2005.
 *
 <li>This software is in the public domain</li>
 <li>and is provided AS IS, with NO WARRANTY.</li>
 */

#include <stdio.h>
#include <X11/Xlib.h>

void swallow_keystroke(Display * dpy, XEvent * ev)
{
    XAllowEvents(dpy, AsyncKeyboard, ev->xkey.time);
    /* burp */
}

void passthru_keystroke(Display * dpy, XEvent * ev)
{
    /* pass it through to the app, as if we never intercepted it */
    XAllowEvents(dpy, ReplayKeyboard, ev->xkey.time);
    XFlush(dpy); /* don't forget! */
}

int main(void)
{
    Display * dpy = XOpenDisplay(0x0);
    KeyCode F1;
    XEvent ev;

    if(!dpy) return 1;

    F1 = XKeysymToKeycode(dpy, XStringToKeysym("F1"));

    /* grab our key combo -- we use AnyModifier because of caps lock/num lock
     <li>complexity.  just grab every F1 press.</li>
     */
    XGrabKey(dpy, F1, AnyModifier, DefaultRootWindow(dpy), 1, GrabModeSync,
            GrabModeSync);

    for(;;)
    {
        XNextEvent(dpy, &ev);

        if(ev.type == KeyPress </td><td> ev.type == KeyRelease)
        {
            /* again the lock key issues -- we just fire if alt is being
             <li>pressed, regardless if other modifiers are being pressed or not.</li>
             */
            if(ev.xkey.keycode == F1 && ev.xkey.state & Mod1Mask)
            {
                if(ev.type == KeyPress)
                    fprintf(stderr, "got Alt+F1\n");

                swallow_keystroke(dpy, &ev);
            }
            else
            {
                fprintf(stderr, "got (something else)+F1, passing through\n");
                passthru_keystroke(dpy, &ev);
            }
        }
    }
}

/* a simpler pseudo-code version showing only the logic:
 *
 <li>handle_key_event()</li>
 <li>{</li>
 <li>    if key event is alt+f1 keypress:</li>
 <li>        print "got alt+f1!"</li>
 <li>        swallow key event</li>
 *
 <li>    elif key event is alt+f1 keyrelease:</li>
 <li>        swallow key event</li>
 *
 <li>    else:</li>
 <li>        pass through key event</li>
 <li>        xflush</li>
 <li>}</li>
 */
</pre>
